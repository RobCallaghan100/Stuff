using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Euler3
{
    class Program
    {
        static void Main(string[] args)
        {
<<<<<<< accf26b68c749b7d1fb0fbf00f57332580761d91
            const long numm = 600851475143;
            long newnumm = numm;
            long largestFact = 0;

            int counter = 2;
            while (counter * counter <= newnumm)
            {
                if (newnumm % counter == 0)
                {
                    newnumm = newnumm / counter;
                    largestFact = counter;
                }
                else
                {
                    counter = (counter == 2) ? 3 : counter + 2;
                }
            }
            if (newnumm > largestFact)
            { // the remainder is a prime number
                largestFact = newnumm;
            }

            Console.WriteLine(largestFact);
=======
            Console.WriteLine(DateTime.UtcNow);

            List<int> factors = CalculatePrimefactors(600851475143);
            foreach (int a in factors)
            {
                Console.WriteLine(a);
            }

//            // 13195 are 5, 7, 13 and 29
//            long number = 600851475143;// 300000 600851475143
//
//            Console.WriteLine(DateTime.UtcNow);
//
//            foreach (var pf in GetPrimeFactors2(number).AsParallel())
//            {
//                Console.WriteLine(pf);
//            }
//
            Console.WriteLine(DateTime.UtcNow);
>>>>>>> more euler 3
            Console.ReadLine();

            //            // 13195 are 5, 7, 13 and 29
            //            long number = 600851475143;// 300000 600851475143
            //
            //            Console.WriteLine(DateTime.UtcNow);
            //
            //            foreach (var pf in GetPrimeFactors2(number).AsParallel())
            //            {
            //                Console.WriteLine(pf);
            //            }
            //
            //            Console.WriteLine(DateTime.UtcNow);
            //            Console.ReadLine();
            //            //GetPrimeFactors(number);
        }

        static List<int> CalculatePrimefactors(long Number)
        {
            int Num = (int)Math.Sqrt(Number);
            int[] tempArray = new int[Num];
            int counter = 3;
            int nextLevel = 0;
            int k = 0;
            int i = 2;
            double sqrt = 0;
            tempArray[0] = 2;
            tempArray[1] = 3;
            while (i < Num)
            {
                counter = counter + 2;
                sqrt = Math.Sqrt(counter);
                nextLevel = (int)sqrt;
                if (nextLevel == sqrt)
                    continue;
                k = 0;
                for (k = 0; k < nextLevel; k++)
                {
                    if (counter % tempArray[k] == 0)
                    {
                        break;
                    }
                }
                if (k == nextLevel)
                {
                    tempArray[i++] = counter;
                }
                else
                    continue;
            }
            List<int> result = new List<int>();
            foreach (int a in tempArray)
            {
                if (a > 0 && Number % a == 0)
                {
                    result.Add(a);
                }
            }
            return result;
        }

        private static IEnumerable<long> GetPrimeFactors2(long number)
        {
            foreach (var factor in PrimeFactor.GetFactor(number).AsParallel())
            {
                if (PrimeFactor.IsPrimeNumber(factor))
                {
                    yield return factor;
                }
            }
        }

        private static async void GetPrimeFactors(long number)
        {
            Console.WriteLine(DateTime.UtcNow + "\n");

            var primeFactor = new PrimeFactor();
            var primeFactors = await primeFactor.GetPrimeFactors(number);

            foreach (var pf in primeFactors)
            {
                Console.WriteLine(pf + "\n");
            }

            Console.WriteLine(DateTime.UtcNow + "\n");

            Console.ReadLine();
        }
    }
}
